"""
    This script accepts text file and converts it into bedgraph format file
    ex) Eigenvector file generated by Aiden lab Juicer tools

    Usage: txt_to_bedgraph [-i input file] [-c chromosome] [-r resolution] [-t track name] [-d description] [-p positive value color] [-n negative value color] [-o output file] [-a append]

    Options:
    -i FILE     Input file(required)
                It contains one real number in each line.
                The value of i-th line represents that of the chromosomal region from i * [resolution] bp to (i + 1) * [resolution] bp.

    -c str      Chromosome name(required)

    -r int      Region interval(required)

    -t str      Track name(required)

    -d str      Track description(optional)

    -p int,int,int      Positive valure color(optional)
                        Three numbers represent (R, G, B)
                        default: 255,0,0

    -n int,int,int      Negative value color(optional)
                        Three numbers represent (R, G, B)
                        default: 0,0,255

    -o FILE     Output file(optional)
                default: standard output

    -a      File append mode(optional)
            If this option set, track definition line will be skipped

"""

import sys
from argparse import ArgumentParser


def parse():
    usage = 'python {} [-i input file] [-c chromosome] [-r resolution] [-t track name] [-d description] [-p positive value color] [-n negative value color] [-o output file] [-a append]'.format(
        __file__)
    parser = ArgumentParser(usage=usage)
    parser.add_argument('-i', type=str, dest='file',
                        help='Input file(required)')
    parser.add_argument('-c', type=str, dest='chrom',
                        help='Chromosome name(required)')
    parser.add_argument('-r', type=int, dest='resolution',
                        help='Region interval(required)')
    parser.add_argument('-t', type=str, dest='name',
                        help='Track name(required)')
    parser.add_argument('-d', type=str, dest='description', default='',
                        help='Track description(optional)')
    parser.add_argument('-p', type=str, dest='col', default='255,0,0',
                        help='Positive valure color(optional)')
    parser.add_argument('-n', type=str, dest='alt_col', default='0,0,255',
                        help='Negative value color(optional)')
    parser.add_argument('-o', type=str, dest='output_file', default='',
                        help='Output file(required)')
    parser.add_argument('-a', dest='append', action='store_true', help='File append mode(optional)')
    
    args = parser.parse_args()

    if not (args.file and args.chrom and args.resolution, args.name and args.col and args.output_file):
        print(parser.usage)
        sys.exit(1)

    return (args.file, args.chrom, args.resolution, args.name, args.description, args.col, args.alt_col, args.output_file, args.append)


if __name__ == '__main__':
    (file, chrom, resolution, name, description, col, alt_col, output_file, append) = parse()

    f = open(file, 'r')
    values = [float(line.strip()) for line in f]
    f.close()

    if output_file == '':
        f = sys.stdout
    else:
        if append:
            f = open(output_file, 'a')
        else:
            f = open(output_file, 'w')
    if not append:
        f.write(' '.join(['track', 'type=bedGraph', 'name=' + name, 'description=' + description, 'color=' + col, 'altColor=' + alt_col]) + '\n')
    for i, val in enumerate(values):
        # skip the last value to avoid boundary error
        if i == len(values) - 1:
            break
        f.write('\t'.join([chrom, str(resolution * i), str(resolution * (i + 1)), str(val)]) + '\n')
    f.close()


